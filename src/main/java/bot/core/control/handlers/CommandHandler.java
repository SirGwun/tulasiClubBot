package bot.core.control.handlers;

import bot.core.model.EditingActions;
import bot.core.model.MessageContext;
import bot.core.Main;
import bot.core.model.SessionState;
import bot.core.util.ChatUtils;
import bot.core.control.SessionController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChat;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class CommandHandler {
    private static final Logger log = LoggerFactory.getLogger(CommandHandler.class);
    private final SessionState state;
    private final long userId;

    public CommandHandler(SessionState state, long userId) {
        this.state = state;
        this.userId = userId;
    }

    public void handle(MessageContext message) {
        if (message.isCommand()) {
            String[] data = message.getText().split(" ", 2);
            String command = data[0];
            String args = data.length > 1 ? data[1] : "";
            handleCommand(command, args);
        } else {
            log.warn("handleCommand call with no command {}", message.getText());
        }
    }

    public void handleCommand(String command, String args) {
        if (userId == Main.dataUtils.getAdminId()) {
            handleAdminCommand(command, args);
        } else {
           handleUserCommand(command);
        }
    }

    private void handleAdminCommand(String command, String args) {
        switch (command) {
            case "/start":
                handleStartCommand();
                break;
            case "/set_group":
                handleSetGroupCommand();
                break;
            case "/info":
                handleInfoCommand();
                break;
            case "/help":
                handleHelpCommand();
                break;
            case "/catalog":
                handleCatalogCommand();
                break;
            //***************
            case "/cancel":
                handleCancelCommand();
                break;
            case "/edit_info":
                handleEditInfoCommand();
                break;
            case "/edit_help":
                handleEditHelpCommand();
                break;
            case "/set_payment_info":
                handleSetPaymentInfo();
                break;
            case "/del":
                handleDelCommand();
                break;
            case "/say":
                handleSayCommand(args);
                break;
            default:
                handleUnknownCommand(command);
                break;
        }
    }

    private void handleUserCommand(String command) {
        switch (command) {
            case "/start":
                handleStartCommand();
                break;
            case "/set_group":
                handleSetGroupCommand();
                break;
            case "/info":
                handleInfoCommand();
                break;
            case "/help":
                handleHelpCommand();
                break;
            case "/catalog":
                handleCatalogCommand();
                break;
            default:
                handleUnknownCommand(command);
                break;
        }
    }

    private void handleStartCommand() {
        log.info("User {} use start command", userId);

        String START_MESSAGE = """
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
                –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.
                
                –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ª–µ–∫—Ü–∏—é
                                
                1. –ù–∞–∂–∏–º–∞–µ—Ç–µ –ú–µ–Ω—é
                2. –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É (/set_group)
                3. –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ª–µ–∫—Ü–∏—é.
                4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, —Ñ–æ—Ç–æ).
                5. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–π–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 —á–∞—Å–æ–≤, –Ω–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ)
                                
                üîπ –ß–µ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –¥–æ—Å—Ç—É–ø –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.
                
                """;
        String paymentInfo = Main.dataUtils.getPaymentInfo();
        ChatUtils.sendMessage(userId, START_MESSAGE + paymentInfo);

//        SendPhoto sendPhoto = new SendPhoto();
//        File file = Main.dataUtils.getPaymentPhoto();
//        sendPhoto.setPhoto(new InputFile(file));
//        sendPhoto.setChatId(userId);
//        ChatUtils.sendPhoto(sendPhoto);
    }


    private void handleSetGroupCommand() {
        log.info("User {} set group", userId);
        InlineKeyboardMarkup allGroupKeyboard = ChatUtils.getAllGroupKeyboard("setGroup", userId);

        if (allGroupKeyboard.getKeyboard().isEmpty()) {
            ChatUtils.sendMessage(userId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø");
            return;
        }

        //todo –Ω–∞—É—á–∏—Ç—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ç–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ —Ä–∞–∑–Ω–æ–º—É –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        if (hasExceptedGroup(allGroupKeyboard)) {
            ChatUtils.sendMessage(userId, "–ë–æ—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ '!', –ª–∏–±–æ –Ω–µ –∞–¥–º–∏–Ω –≤ –Ω–∏—Ö");
        }
        ChatUtils.sendInlineKeyboard(userId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", allGroupKeyboard);
    }

    private boolean hasExceptedGroup(InlineKeyboardMarkup allGroupKeyboard) {
        boolean hasGroupException = false;
        for (List<InlineKeyboardButton> row : allGroupKeyboard.getKeyboard()) {
            for (InlineKeyboardButton button : row) {
                if (button.getText().startsWith("!")) {
                    hasGroupException = true;
                }
            }
        }
        return hasGroupException;
    }

    private void handleCatalogCommand() {
        log.info("user {} get /catalog command", userId);
        String catalog = Main.dataUtils.getCatalog();

        if (catalog == null) {
            ChatUtils.sendMessage(userId, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç");
            log.info("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç");
            return;
        }

        List<String> messages = splitMessage(catalog, 4096);
        for (String message : messages) {
            ChatUtils.sendMessage(userId, message);
        }
    }

    private List<String> splitMessage(String text, int maxLength) {
        List<String> messages = new ArrayList<>();
        int start = 0;
        while (start < text.length()) {
            int end = Math.min(start + maxLength, text.length());

            if (end < text.length() && !Character.isWhitespace(text.charAt(end))) {
                int lastSpace = text.lastIndexOf(' ', end);
                int lastNewLine = text.lastIndexOf('\n', end);
                int breakPoint = Math.max(lastSpace, lastNewLine);
                if (breakPoint > start) {
                    end = breakPoint;
                }
            }

            messages.add(text.substring(start, end));
            start = end;

            while (start < text.length() && Character.isWhitespace(text.charAt(start))) {
                start++;
            }
        }
        return messages;
    }

    private void handleCancelCommand() {
        log.info("User used {} cancel command", userId);
        EditingActions action = state.cansel();
        ChatUtils.sendMessage(userId, "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–æ–π" + action.toString() + "–æ—Ç–º–µ–Ω–µ–Ω");
    }

    private void handleDelCommand() {
        log.info("user {} get /del command", userId);

        if (Main.dataUtils.getGroupMap().isEmpty()) {
            ChatUtils.sendMessage(userId, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã");
            return;
        }

        InlineKeyboardMarkup allGroupKeyboard = ChatUtils.getAllGroupKeyboard("delGroup" ,userId);
        ChatUtils.sendInlineKeyboard(userId, "–í—ã–±–µ—Ä–µ—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", allGroupKeyboard);
    }

    private void handleInfoCommand() {
        ChatUtils.sendMessage(userId, Main.dataUtils.getInfo());
    }

    private void handleHelpCommand() {
        ChatUtils.sendMessage(userId, Main.dataUtils.getHelp());
    }

    private void handleEditInfoCommand() {
        log.info("User {} edit info", userId);
        state.editInfo();
        ChatUtils.sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
    }

    private void handleEditHelpCommand() {
        log.info("User {} edit help", userId);
        state.editHelp();
        ChatUtils.sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏");
    }

    private void handleSetPaymentInfo() {
        log.info("User {} is set's payment info", userId);
        state.editPaymentInfo();
        ChatUtils.sendMessage(userId, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã");
    }

    private void handleSayCommand(String args) {
        if (args == null || args.isBlank()) {
            ChatUtils.sendMessage(userId, "–§–æ—Ä–º–∞—Ç: /say @username —Ç–µ–∫—Å—Ç");
            return;
        }

        String[] parts = args.trim().split(" ", 2);
        if (parts.length < 2) {
            ChatUtils.sendMessage(userId, "–§–æ—Ä–º–∞—Ç: /say @username —Ç–µ–∫—Å—Ç");
            return;
        }

        String username = parts[0].startsWith("@") ? parts[0].substring(1) : parts[0];
        String text = parts[1];
        log.info("Admin {} use say command to @{}", userId, username);

        Long targetId = SessionController.getInstance().getUserIdByUsername(username);
        if (targetId == null) {
            try {
                GetChat getChat = new GetChat("@" + username);
                Chat chat = Main.bot.execute(getChat);
                targetId = chat.getId();
            } catch (TelegramApiException e) {
                log.warn("Unable to find user via Telegram API: {}", e.getMessage());
            }
        }

        if (targetId == null) {
            ChatUtils.sendMessage(userId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + username + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        ChatUtils.sendMessage(targetId, text);
        ChatUtils.sendMessage(userId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @" + username);
    }

    private void handleUnknownCommand(String message) {
        log.info("User {} send unknown command {}", userId, message);
        ChatUtils.sendMessage(userId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
}
