package bot.core.control;

import bot.core.Main;
import bot.core.PaymentBot;
import bot.core.model.MessageContext;
import bot.core.util.ChatUtils;
import bot.core.util.DataUtils;
import bot.core.util.MessageUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

public class CommandHandler {
    private static final Logger log = LoggerFactory.getLogger(CommandHandler.class);
    private EditingSessionState state;
    private long userId;

    private final String START_MESSAGE = """
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
                
                –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.
                
                –ü—Ä–æ—à—É –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ª–µ–∫—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É:
                
                2202203650939848 (—Ä—É–±) –°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ú–∏–ª–∞–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞ –°.\s
                4400430384625882 (—Ç–µ–Ω—å–≥–µ) KASPI –ø–æ–ª—É—á–∞—Ç–µ–ª—å Darshan Singkh
                
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —á–µ–∫ –∏ –¥–∞–ª–µ–µ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
               
                –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                
                1. –ù–∞–∂–∏–º–∞–µ—Ç–µ –ú–µ–Ω—é
                2. –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É (/set_group)
                3. –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ª–µ–∫—Ü–∏—é.
                4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, —Ñ–æ—Ç–æ).
                5. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–π–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ –æ–¥–Ω–æ–≥–æ –¥–Ω—è, –Ω–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ)
                
                üîπ –ß–µ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –¥–æ—Å—Ç—É–ø –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.
                """;

    public CommandHandler(EditingSessionState state, long userId) {
        this.state = state;
        this.userId = userId;
    }

    public void handle(MessageContext message) {
        if (message.isCommand()) {
            String[] data = message.getText().split(" ");
            log.info("New command {}", data[0]);
            handleCommand(data[0]);
        } else {
            log.warn("handleCommand call with no command {}", message.getText());
        }
    }

    public void handleCommand(String command) {
        switch (command) {
            case "/start":
                handleStartCommand();
                break;
            case "/set_group":
                handleSetGroupCommand();
                break;
            case "/new_group":
                handleNewGroupCommand();
                break;
            case "/cancel":
                handleCancelCommand();
                break;
            case "/info":
                handleInfoCommand();
                break;
            case "/help":
                handleHelpCommand();
                break;
            case "/edit_info":
                handleEditInfoCommand();
                break;
            case "/edit_help":
                handleEditHelpCommand();
                break;
            case "/del":
                handleDelCommand();
                break;
            case "/catalog":
                handleCatalogCommand();
                break;
            default:
                handleUnknownCommand();
                break;
        }
    }

    private void handleStartCommand(long userID) {
        log.info("User {} started bot", userID);
        ChatUtils.sendMessage(userID, START_MESSAGE);
    }

    private void handleSetGroupCommand() {
        log.info("User {} set group", userId);

        if (DataUtils.getGroupList().isEmpty()) {
            ChatUtils.sendMessage(userId "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø");
            return;
        }

        InlineKeyboardMarkup allGroupKeyboard = ChatUtils.getAllGroupKeyboard(userID, "setGroup");
        if (MessageUtils.hasExceptedGroup(allGroupKeyboard)) {
            ChatUtils.sendMessage(userId, "–ì—Ä—É–ø–ø—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ \"!\" –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ª–∏–±–æ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∏—Ö –∞–¥–º–∏–Ω–æ–º\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Ö —É–¥–∞–ª–∏—Ç—å");
        }

        ChatUtils.sendInlineKeyboard(userId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", allGroupKeyboard);
    }

    private void handleCatalogCommand() {
        log.info("user {} get /catalog command", userId);
        String catalog = DataUtils.getCatalog();

        if (catalog == null) {
            ChatUtils.sendMessage(userId, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç");
            log.info("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç");
            return;
        }

        List<String> messages = MessageUtils.splitMessage(catalog, 4096);
        for (String message : messages) {
            ChatUtils.sendMessage(userId, message);
        }
    }

    private void handleNewGroupCommand() {
        log.info("User {} create new group", userId);
        if (userId == DataUtils.getAdminID()) {
            ChatUtils.sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã");
            state.setWaitingGroupName(true);
        } else {
            ChatUtils.sendMessage(userId, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    private void handleCancelCommand(long userID) {
        log.info("User {} cancel command", userID);
        if (userID == DataUtils.getAdminID()) {
            PaymentBot.newGroup = false;
            PaymentBot.newGroupName = null;
            ChatUtils.sendMessage(userID, "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω–µ–Ω");
        } else {
            ChatUtils.sendMessage(userID, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    private void handleInfoCommand(long userID) {
        ChatUtils.sendMessage(userID, DataUtils.getInfo());
    }

    private void handleHelpCommand(long userID) {
        ChatUtils.sendMessage(userID, DataUtils.getHelp());
    }

    private void handleEditInfoCommand(long userID) {
        log.info("User {} edit info", userID);
        if (userID == DataUtils.getAdminID()) {
            PaymentBot.editInfo = true;
            ChatUtils.sendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
        } else {
            ChatUtils.sendMessage(userID, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    private void handleEditHelpCommand(long userID) {
        log.info("User {} edit help", userID);
        if (userID == DataUtils.getAdminID()) {
            PaymentBot.editHelp = true;
            ChatUtils.sendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏");
        } else {
            ChatUtils.sendMessage(userID, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    private void handleUnknownCommand(long userID, String message) {
        log.info("User {} send unknown command {}", userID, message);
        ChatUtils.sendMessage(userID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
}
